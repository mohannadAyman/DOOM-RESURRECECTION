#pragma once
#include <vector>
//#include "settings.h"
#include<GL\glut.h>

using namespace std;

const int ROWS = 25;
const int COLS = 10;
class Map
{


public:
    vector<vector<char>> arr =
    {
        { '0','0','0','0','0','0','0','0','0','0' },
        { '0','_','_','_','_','0','_','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','0','_','_','0','_','_','0' },
        { '0','_','_','0','_','_','_','_','_','0' },
        { '0','_','_','0','_','_','_','_','_','0' },
        { '0','_','_','0','0','0','0','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','_','0','_','_','0' },
        { '0','_','0','_','_','_','0','_','_','0' },
        { '0','_','0','_','_','_','0','0','_','0' },
        { '0','0','0','_','_','_','_','0','_','0' },
        { '0','0','_','_','_','_','_','0','_','0' },
        { '0','0','0','0','0','_','0','0','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','0','0','0','0','0' },
        { '0','_','0','_','_','0','_','_','_','0' },
        { '0','_','0','_','_','0','_','_','_','0' },
        { '0','_','0','0','0','0','_','_','_','0' },
        { '0','_','0','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','_','_','_','_','_','_','_','_','0' },
        { '0','0','0','0','0','0','0','0','0','0' }
    };


   // Map()
   // {
   //     glClearColor(0, 0, 0, 0.0);
   //     glMatrixMode(GL_PROJECTION);
   //     gluOrtho2D(0.0, 50, 0.0, 50);
   // }

    void draw()
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3f(.5, 0.4, 0.3);
        float ratio = 1600 / 900;
        // draw squares in positions of the 0's

        for (int i = 0; i < ROWS; i++)
        {
            for (int j = 0; j < COLS; j++)
            {
                if (arr[i][j] == '0') 
                {    
                     glRectf(j*150, (ROWS - i)*36 , ((j + 1)*150) , ((ROWS - i-1)*36));
                   
                }
            }
        }

        glutSwapBuffers();
        glFlush ();
    }
};

